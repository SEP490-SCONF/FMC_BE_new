// <auto-generated />
using System;
using BussinessObject.Entity;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BussinessObject.Migrations
{
    [DbContext(typeof(ConferenceFTestContext))]
    [Migration("20250707113841_AddHighlightArea")]
    partial class AddHighlightArea
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BussinessObject.Entity.AnswerLike", b =>
                {
                    b.Property<int>("LikeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LikeId"));

                    b.Property<int>("AnswerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("LikedBy")
                        .HasColumnType("int");

                    b.HasKey("LikeId")
                        .HasName("PK__AnswerLi__A2922C1487348A21");

                    b.HasIndex("LikedBy");

                    b.HasIndex(new[] { "AnswerId", "LikedBy" }, "UQ_AnswerLike")
                        .IsUnique();

                    b.ToTable("AnswerLike", (string)null);
                });

            modelBuilder.Entity("BussinessObject.Entity.AnswerQuestion", b =>
                {
                    b.Property<int>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnswerId"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AnswerBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("FqId")
                        .HasColumnType("int");

                    b.Property<int?>("ParentAnswerId")
                        .HasColumnType("int");

                    b.HasKey("AnswerId")
                        .HasName("PK__AnswerQu__D482500427DFBA36");

                    b.HasIndex("AnswerBy");

                    b.HasIndex("FqId");

                    b.HasIndex("ParentAnswerId");

                    b.ToTable("AnswerQuestion", (string)null);
                });

            modelBuilder.Entity("BussinessObject.Entity.CallForPaper", b =>
                {
                    b.Property<int>("Cfpid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CFPId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Cfpid"));

                    b.Property<int>("ConferenceId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("TemplatePath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Cfpid")
                        .HasName("PK__CallForP__A88117A04A2B1181");

                    b.HasIndex("ConferenceId");

                    b.ToTable("CallForPaper", (string)null);
                });

            modelBuilder.Entity("BussinessObject.Entity.Certificate", b =>
                {
                    b.Property<int>("CertificateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CertificateId"));

                    b.Property<string>("CertificateNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CertificateUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("IssueDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("RegId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasKey("CertificateId")
                        .HasName("PK__Certific__BBF8A7C17F0C82A8");

                    b.HasIndex(new[] { "RegId" }, "UQ_Certificate_Reg")
                        .IsUnique();

                    b.ToTable("Certificate", (string)null);
                });

            modelBuilder.Entity("BussinessObject.Entity.Conference", b =>
                {
                    b.Property<int>("ConferenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConferenceId"));

                    b.Property<string>("BannerUrl")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("CallForPaper")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ConferenceId")
                        .HasName("PK__Conferen__4A95F57384BD1A7D");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Conference", (string)null);
                });

            modelBuilder.Entity("BussinessObject.Entity.ConferenceRole", b =>
                {
                    b.Property<int>("ConferenceRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConferenceRoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ConferenceRoleId")
                        .HasName("PK__Conferen__39CD6654490CDB3B");

                    b.HasIndex(new[] { "RoleName" }, "UQ__Conferen__8A2B6160AF36A424")
                        .IsUnique();

                    b.ToTable("ConferenceRole", (string)null);
                });

            modelBuilder.Entity("BussinessObject.Entity.Forum", b =>
                {
                    b.Property<int>("ForumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ForumId"));

                    b.Property<int>("ConferenceId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ForumId")
                        .HasName("PK__Forum__E210AC6F56E794C4");

                    b.HasIndex(new[] { "ConferenceId" }, "UQ__Forum__4A95F5720353CE66")
                        .IsUnique();

                    b.ToTable("Forum", (string)null);
                });

            modelBuilder.Entity("BussinessObject.Entity.ForumQuestion", b =>
                {
                    b.Property<int>("FqId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FqId"));

                    b.Property<int>("AskBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ForumId")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("FqId")
                        .HasName("PK__ForumQue__3BB79C1856AEF2B6");

                    b.HasIndex("AskBy");

                    b.HasIndex("ForumId");

                    b.ToTable("ForumQuestion", (string)null);
                });

            modelBuilder.Entity("BussinessObject.Entity.HighlightArea", b =>
                {
                    b.Property<int>("HighlightAreaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HighlightAreaId"));

                    b.Property<double?>("Height")
                        .HasColumnType("float");

                    b.Property<int>("HighlightId")
                        .HasColumnType("int");

                    b.Property<double?>("Left")
                        .HasColumnType("float");

                    b.Property<int?>("PageIndex")
                        .HasColumnType("int");

                    b.Property<string>("TextHighlighted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Top")
                        .HasColumnType("float");

                    b.Property<double?>("Width")
                        .HasColumnType("float");

                    b.HasKey("HighlightAreaId");

                    b.HasIndex("HighlightId");

                    b.ToTable("HighlightArea", (string)null);
                });

            modelBuilder.Entity("BussinessObject.Entity.Notification", b =>
                {
                    b.Property<int>("NotiId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotiId"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("RoleTarget")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("NotiId")
                        .HasName("PK__Notifica__EDC08E92567D61C6");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("BussinessObject.Entity.NotificationStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("NotiId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Notifica__3214EC078A7F3875");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "NotiId", "UserId" }, "UQ__Notifica__3CB80257E086A0F9")
                        .IsUnique();

                    b.ToTable("NotificationStatus", (string)null);
                });

            modelBuilder.Entity("BussinessObject.Entity.Paper", b =>
                {
                    b.Property<int>("PaperId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaperId"));

                    b.Property<string>("Abstract")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ConferenceId")
                        .HasColumnType("int");

                    b.Property<string>("FilePath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool?>("IsPublished")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Keywords")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("PaymentId")
                        .HasColumnType("int");

                    b.Property<decimal?>("PublicationFee")
                        .HasColumnType("money");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("SubmitDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("TopicId")
                        .HasColumnType("int");

                    b.HasKey("PaperId")
                        .HasName("PK__Paper__AB86120B3A537ACE");

                    b.HasIndex("ConferenceId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("TopicId");

                    b.ToTable("Paper", (string)null);
                });

            modelBuilder.Entity("BussinessObject.Entity.PaperAuthor", b =>
                {
                    b.Property<int>("PaperId")
                        .HasColumnType("int");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("AuthorOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("PaperId", "AuthorId")
                        .HasName("PK__PaperAut__FC8BBDC8BF65C695");

                    b.HasIndex("AuthorId");

                    b.ToTable("PaperAuthor", (string)null);
                });

            modelBuilder.Entity("BussinessObject.Entity.PaperRevision", b =>
                {
                    b.Property<int>("RevisionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RevisionId"));

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("PaperId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("SubmittedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("RevisionId")
                        .HasName("PK__PaperRev__B4B1E3D1D2D55D9F");

                    b.HasIndex("PaperId");

                    b.ToTable("PaperRevision", (string)null);
                });

            modelBuilder.Entity("BussinessObject.Entity.Payment", b =>
                {
                    b.Property<int>("PayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PayId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<int>("ConferenceId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Currency")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime?>("PaidAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("PaperId")
                        .HasColumnType("int");

                    b.Property<string>("PayOsCheckoutUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("PayOS_CheckoutUrl");

                    b.Property<string>("PayOsOrderCode")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("PayOS_OrderCode");

                    b.Property<string>("PayStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Purpose")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("RegId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PayId")
                        .HasName("PK__Payment__EE8FCECFAA2919C2");

                    b.HasIndex("ConferenceId");

                    b.HasIndex("PaperId");

                    b.HasIndex("RegId");

                    b.HasIndex("UserId");

                    b.ToTable("Payment", (string)null);
                });

            modelBuilder.Entity("BussinessObject.Entity.Proceeding", b =>
                {
                    b.Property<int>("ProceedingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProceedingId"));

                    b.Property<int>("ConferenceId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("PublishedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PublishedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("ProceedingId")
                        .HasName("PK__Proceedi__9710D55B8BE3C9BB");

                    b.HasIndex("ConferenceId");

                    b.HasIndex("PublishedBy");

                    b.ToTable("Proceeding", (string)null);
                });

            modelBuilder.Entity("BussinessObject.Entity.QuestionLike", b =>
                {
                    b.Property<int>("LikeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LikeId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("FqId")
                        .HasColumnType("int");

                    b.Property<int>("LikedBy")
                        .HasColumnType("int");

                    b.HasKey("LikeId")
                        .HasName("PK__Question__A2922C14D192659E");

                    b.HasIndex("LikedBy");

                    b.HasIndex(new[] { "FqId", "LikedBy" }, "UQ_QuestionLike")
                        .IsUnique();

                    b.ToTable("QuestionLike", (string)null);
                });

            modelBuilder.Entity("BussinessObject.Entity.Registration", b =>
                {
                    b.Property<int>("RegId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RegId"));

                    b.Property<int>("ConferenceId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RegisteredAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RegId")
                        .HasName("PK__Registra__2C6822F85C9220A9");

                    b.HasIndex("ConferenceId");

                    b.HasIndex(new[] { "UserId", "ConferenceId" }, "UQ__Registra__3321931AD118AF4D")
                        .IsUnique();

                    b.ToTable("Registration", (string)null);
                });

            modelBuilder.Entity("BussinessObject.Entity.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaperId")
                        .HasColumnType("int");

                    b.Property<string>("PaperStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReviewedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("ReviewerId")
                        .HasColumnType("int");

                    b.Property<int>("RevisionId")
                        .HasColumnType("int");

                    b.Property<int?>("Score")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ReviewId")
                        .HasName("PK__Review__74BC79CEC6C0E2AC");

                    b.HasIndex("PaperId");

                    b.HasIndex("ReviewerId");

                    b.HasIndex("RevisionId");

                    b.ToTable("Review", (string)null);
                });

            modelBuilder.Entity("BussinessObject.Entity.ReviewComment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<string>("CommentText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("HighlightId")
                        .HasColumnType("int");

                    b.Property<int>("ReviewId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("new");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CommentId")
                        .HasName("PK__ReviewCo__C3B4DFCAACD3E71E");

                    b.HasIndex("HighlightId");

                    b.HasIndex("ReviewId");

                    b.HasIndex("UserId");

                    b.ToTable("ReviewComment", (string)null);
                });

            modelBuilder.Entity("BussinessObject.Entity.ReviewHighlight", b =>
                {
                    b.Property<int>("HighlightId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HighlightId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<double?>("Height")
                        .HasColumnType("float");

                    b.Property<double?>("Left")
                        .HasColumnType("float");

                    b.Property<int?>("PageIndex")
                        .HasColumnType("int");

                    b.Property<int>("ReviewId")
                        .HasColumnType("int");

                    b.Property<string>("TextHighlighted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Top")
                        .HasColumnType("float");

                    b.Property<double?>("Width")
                        .HasColumnType("float");

                    b.HasKey("HighlightId")
                        .HasName("PK__ReviewHi__B11CEDF058DDC475");

                    b.HasIndex("ReviewId");

                    b.ToTable("ReviewHighlight", (string)null);
                });

            modelBuilder.Entity("BussinessObject.Entity.ReviewerAssignment", b =>
                {
                    b.Property<int>("AssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssignmentId"));

                    b.Property<DateTime?>("AssignedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("PaperId")
                        .HasColumnType("int");

                    b.Property<int>("ReviewerId")
                        .HasColumnType("int");

                    b.HasKey("AssignmentId")
                        .HasName("PK__Reviewer__32499E7786E3322E");

                    b.HasIndex("PaperId");

                    b.HasIndex("ReviewerId");

                    b.ToTable("ReviewerAssignment", (string)null);
                });

            modelBuilder.Entity("BussinessObject.Entity.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("RoleId")
                        .HasName("PK__Role__8AFACE1A7AF0DC58");

                    b.HasIndex(new[] { "RoleName" }, "UQ__Role__8A2B6160B9E4028C")
                        .IsUnique();

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            RoleName = "Member"
                        });
                });

            modelBuilder.Entity("BussinessObject.Entity.Schedule", b =>
                {
                    b.Property<int>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScheduleId"));

                    b.Property<int>("ConferenceId")
                        .HasColumnType("int");

                    b.Property<int?>("PaperId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PresentationTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("PresenterId")
                        .HasColumnType("int");

                    b.Property<string>("SessionTitle")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ScheduleId")
                        .HasName("PK__Schedule__9C8A5B49A7037950");

                    b.HasIndex("ConferenceId");

                    b.HasIndex("PaperId");

                    b.HasIndex("PresenterId");

                    b.ToTable("Schedule", (string)null);
                });

            modelBuilder.Entity("BussinessObject.Entity.Topic", b =>
                {
                    b.Property<int>("TopicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TopicId"));

                    b.Property<bool?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("TopicName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("TopicId")
                        .HasName("PK__Topic__022E0F5D531B8A1C");

                    b.ToTable("Topic", (string)null);
                });

            modelBuilder.Entity("BussinessObject.Entity.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<bool?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("TokenExpiry")
                        .HasColumnType("datetime");

                    b.HasKey("UserId")
                        .HasName("PK__User__1788CC4C40D8F6FB");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "Email" }, "UQ__User__A9D10534E776CB52")
                        .IsUnique();

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("BussinessObject.Entity.UserConferenceRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AssignedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("ConferenceId")
                        .HasColumnType("int");

                    b.Property<int>("ConferenceRoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__UserConf__3214EC078FA27F08");

                    b.HasIndex("ConferenceId");

                    b.HasIndex("ConferenceRoleId");

                    b.HasIndex(new[] { "UserId", "ConferenceRoleId", "ConferenceId" }, "UQ__UserConf__365E8FDDF40C0F64")
                        .IsUnique();

                    b.ToTable("UserConferenceRole", (string)null);
                });

            modelBuilder.Entity("ConferenceTopic", b =>
                {
                    b.Property<int>("ConferenceId")
                        .HasColumnType("int");

                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.HasKey("ConferenceId", "TopicId");

                    b.HasIndex("TopicId");

                    b.ToTable("ConferenceTopic", (string)null);
                });

            modelBuilder.Entity("ProceedingPaper", b =>
                {
                    b.Property<int>("ProceedingId")
                        .HasColumnType("int");

                    b.Property<int>("PaperId")
                        .HasColumnType("int");

                    b.HasKey("ProceedingId", "PaperId")
                        .HasName("PK__Proceedi__3DA8B47BECBBC263");

                    b.HasIndex("PaperId");

                    b.ToTable("ProceedingPaper", (string)null);
                });

            modelBuilder.Entity("BussinessObject.Entity.AnswerLike", b =>
                {
                    b.HasOne("BussinessObject.Entity.AnswerQuestion", "Answer")
                        .WithMany("AnswerLikes")
                        .HasForeignKey("AnswerId")
                        .IsRequired()
                        .HasConstraintName("FK__AnswerLik__Answe__7D439ABD");

                    b.HasOne("BussinessObject.Entity.User", "LikedByNavigation")
                        .WithMany("AnswerLikes")
                        .HasForeignKey("LikedBy")
                        .IsRequired()
                        .HasConstraintName("FK__AnswerLik__Liked__7E37BEF6");

                    b.Navigation("Answer");

                    b.Navigation("LikedByNavigation");
                });

            modelBuilder.Entity("BussinessObject.Entity.AnswerQuestion", b =>
                {
                    b.HasOne("BussinessObject.Entity.User", "AnswerByNavigation")
                        .WithMany("AnswerQuestions")
                        .HasForeignKey("AnswerBy")
                        .IsRequired()
                        .HasConstraintName("FK__AnswerQue__Answe__71D1E811");

                    b.HasOne("BussinessObject.Entity.ForumQuestion", "Fq")
                        .WithMany("AnswerQuestions")
                        .HasForeignKey("FqId")
                        .IsRequired()
                        .HasConstraintName("FK__AnswerQues__FqId__70DDC3D8");

                    b.HasOne("BussinessObject.Entity.AnswerQuestion", "ParentAnswer")
                        .WithMany("InverseParentAnswer")
                        .HasForeignKey("ParentAnswerId")
                        .HasConstraintName("FK__AnswerQue__Paren__72C60C4A");

                    b.Navigation("AnswerByNavigation");

                    b.Navigation("Fq");

                    b.Navigation("ParentAnswer");
                });

            modelBuilder.Entity("BussinessObject.Entity.CallForPaper", b =>
                {
                    b.HasOne("BussinessObject.Entity.Conference", "Conference")
                        .WithMany("CallForPapers")
                        .HasForeignKey("ConferenceId")
                        .IsRequired()
                        .HasConstraintName("FK__CallForPa__Confe__44CA3770");

                    b.Navigation("Conference");
                });

            modelBuilder.Entity("BussinessObject.Entity.Certificate", b =>
                {
                    b.HasOne("BussinessObject.Entity.Registration", "Reg")
                        .WithOne("Certificate")
                        .HasForeignKey("BussinessObject.Entity.Certificate", "RegId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Certificate_Registration");

                    b.Navigation("Reg");
                });

            modelBuilder.Entity("BussinessObject.Entity.Conference", b =>
                {
                    b.HasOne("BussinessObject.Entity.User", "CreatedByNavigation")
                        .WithMany("Conferences")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK__Conferenc__Creat__5441852A");

                    b.Navigation("CreatedByNavigation");
                });

            modelBuilder.Entity("BussinessObject.Entity.Forum", b =>
                {
                    b.HasOne("BussinessObject.Entity.Conference", "Conference")
                        .WithOne("Forum")
                        .HasForeignKey("BussinessObject.Entity.Forum", "ConferenceId")
                        .IsRequired()
                        .HasConstraintName("FK__Forum__Conferenc__5EBF139D");

                    b.Navigation("Conference");
                });

            modelBuilder.Entity("BussinessObject.Entity.ForumQuestion", b =>
                {
                    b.HasOne("BussinessObject.Entity.User", "AskByNavigation")
                        .WithMany("ForumQuestions")
                        .HasForeignKey("AskBy")
                        .IsRequired()
                        .HasConstraintName("FK__ForumQues__AskBy__6C190EBB");

                    b.HasOne("BussinessObject.Entity.Forum", "Forum")
                        .WithMany("ForumQuestions")
                        .HasForeignKey("ForumId")
                        .IsRequired()
                        .HasConstraintName("FK__ForumQues__Forum__6D0D32F4");

                    b.Navigation("AskByNavigation");

                    b.Navigation("Forum");
                });

            modelBuilder.Entity("BussinessObject.Entity.HighlightArea", b =>
                {
                    b.HasOne("BussinessObject.Entity.ReviewHighlight", "ReviewHighlight")
                        .WithMany("HighlightAreas")
                        .HasForeignKey("HighlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReviewHighlight");
                });

            modelBuilder.Entity("BussinessObject.Entity.Notification", b =>
                {
                    b.HasOne("BussinessObject.Entity.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Notificat__UserI__282DF8C2");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BussinessObject.Entity.NotificationStatus", b =>
                {
                    b.HasOne("BussinessObject.Entity.Notification", "Noti")
                        .WithMany("NotificationStatuses")
                        .HasForeignKey("NotiId")
                        .IsRequired()
                        .HasConstraintName("FK__Notificat__NotiI__498EEC8D");

                    b.HasOne("BussinessObject.Entity.User", "User")
                        .WithMany("NotificationStatuses")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Notificat__UserI__4A8310C6");

                    b.Navigation("Noti");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BussinessObject.Entity.Paper", b =>
                {
                    b.HasOne("BussinessObject.Entity.Conference", "Conference")
                        .WithMany("Papers")
                        .HasForeignKey("ConferenceId")
                        .IsRequired()
                        .HasConstraintName("FK__Paper__Conferenc__07C12930");

                    b.HasOne("BussinessObject.Entity.Payment", "Payment")
                        .WithMany("Papers")
                        .HasForeignKey("PaymentId")
                        .HasConstraintName("FK_Paper_Payment");

                    b.HasOne("BussinessObject.Entity.Topic", "Topic")
                        .WithMany("Papers")
                        .HasForeignKey("TopicId")
                        .HasConstraintName("FK__Paper__TopicId__08B54D69");

                    b.Navigation("Conference");

                    b.Navigation("Payment");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("BussinessObject.Entity.PaperAuthor", b =>
                {
                    b.HasOne("BussinessObject.Entity.User", "Author")
                        .WithMany("PaperAuthors")
                        .HasForeignKey("AuthorId")
                        .IsRequired()
                        .HasConstraintName("FK__PaperAuth__Autho__160F4887");

                    b.HasOne("BussinessObject.Entity.Paper", "Paper")
                        .WithMany("PaperAuthors")
                        .HasForeignKey("PaperId")
                        .IsRequired()
                        .HasConstraintName("FK__PaperAuth__Paper__151B244E");

                    b.Navigation("Author");

                    b.Navigation("Paper");
                });

            modelBuilder.Entity("BussinessObject.Entity.PaperRevision", b =>
                {
                    b.HasOne("BussinessObject.Entity.Paper", "Paper")
                        .WithMany("PaperRevisions")
                        .HasForeignKey("PaperId")
                        .IsRequired()
                        .HasConstraintName("FK__PaperRevi__Paper__1EA48E88");

                    b.Navigation("Paper");
                });

            modelBuilder.Entity("BussinessObject.Entity.Payment", b =>
                {
                    b.HasOne("BussinessObject.Entity.Conference", "Conference")
                        .WithMany("Payments")
                        .HasForeignKey("ConferenceId")
                        .IsRequired()
                        .HasConstraintName("FK__Payment__Confere__0E6E26BF");

                    b.HasOne("BussinessObject.Entity.Paper", "Paper")
                        .WithMany("Payments")
                        .HasForeignKey("PaperId")
                        .HasConstraintName("FK__Payment__PaperId__114A936A");

                    b.HasOne("BussinessObject.Entity.Registration", "Reg")
                        .WithMany("Payments")
                        .HasForeignKey("RegId")
                        .HasConstraintName("FK__Payment__RegId__0F624AF8");

                    b.HasOne("BussinessObject.Entity.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Payment__UserId__0D7A0286");

                    b.Navigation("Conference");

                    b.Navigation("Paper");

                    b.Navigation("Reg");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BussinessObject.Entity.Proceeding", b =>
                {
                    b.HasOne("BussinessObject.Entity.Conference", "Conference")
                        .WithMany("Proceedings")
                        .HasForeignKey("ConferenceId")
                        .IsRequired()
                        .HasConstraintName("FK__Proceedin__Confe__3B40CD36");

                    b.HasOne("BussinessObject.Entity.User", "PublishedByNavigation")
                        .WithMany("Proceedings")
                        .HasForeignKey("PublishedBy")
                        .HasConstraintName("FK__Proceedin__Publi__3E1D39E1");

                    b.Navigation("Conference");

                    b.Navigation("PublishedByNavigation");
                });

            modelBuilder.Entity("BussinessObject.Entity.QuestionLike", b =>
                {
                    b.HasOne("BussinessObject.Entity.ForumQuestion", "Fq")
                        .WithMany("QuestionLikes")
                        .HasForeignKey("FqId")
                        .IsRequired()
                        .HasConstraintName("FK__QuestionLi__FqId__778AC167");

                    b.HasOne("BussinessObject.Entity.User", "LikedByNavigation")
                        .WithMany("QuestionLikes")
                        .HasForeignKey("LikedBy")
                        .IsRequired()
                        .HasConstraintName("FK__QuestionL__Liked__787EE5A0");

                    b.Navigation("Fq");

                    b.Navigation("LikedByNavigation");
                });

            modelBuilder.Entity("BussinessObject.Entity.Registration", b =>
                {
                    b.HasOne("BussinessObject.Entity.Conference", "Conference")
                        .WithMany("Registrations")
                        .HasForeignKey("ConferenceId")
                        .IsRequired()
                        .HasConstraintName("FK__Registrat__Confe__03F0984C");

                    b.HasOne("BussinessObject.Entity.User", "User")
                        .WithMany("Registrations")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Registrat__UserI__02FC7413");

                    b.Navigation("Conference");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BussinessObject.Entity.Review", b =>
                {
                    b.HasOne("BussinessObject.Entity.Paper", "Paper")
                        .WithMany("Reviews")
                        .HasForeignKey("PaperId")
                        .IsRequired()
                        .HasConstraintName("FK__Review__PaperId__22751F6C");

                    b.HasOne("BussinessObject.Entity.User", "Reviewer")
                        .WithMany("Reviews")
                        .HasForeignKey("ReviewerId")
                        .IsRequired()
                        .HasConstraintName("FK__Review__Reviewer__236943A5");

                    b.HasOne("BussinessObject.Entity.PaperRevision", "Revision")
                        .WithMany("Reviews")
                        .HasForeignKey("RevisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Review__Revision__245D67DE");

                    b.Navigation("Paper");

                    b.Navigation("Reviewer");

                    b.Navigation("Revision");
                });

            modelBuilder.Entity("BussinessObject.Entity.ReviewComment", b =>
                {
                    b.HasOne("BussinessObject.Entity.ReviewHighlight", "Highlight")
                        .WithMany("ReviewComments")
                        .HasForeignKey("HighlightId")
                        .HasConstraintName("FK__ReviewCom__Highl__3493CFA7");

                    b.HasOne("BussinessObject.Entity.Review", "Review")
                        .WithMany("ReviewComments")
                        .HasForeignKey("ReviewId")
                        .IsRequired()
                        .HasConstraintName("FK__ReviewCom__Revie__3587F3E0");

                    b.HasOne("BussinessObject.Entity.User", "User")
                        .WithMany("ReviewComments")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__ReviewCom__UserI__367C1819");

                    b.Navigation("Highlight");

                    b.Navigation("Review");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BussinessObject.Entity.ReviewHighlight", b =>
                {
                    b.HasOne("BussinessObject.Entity.Review", "Review")
                        .WithMany("ReviewHighlights")
                        .HasForeignKey("ReviewId")
                        .IsRequired()
                        .HasConstraintName("FK__ReviewHig__Revie__30C33EC3");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("BussinessObject.Entity.ReviewerAssignment", b =>
                {
                    b.HasOne("BussinessObject.Entity.Paper", "Paper")
                        .WithMany("ReviewerAssignments")
                        .HasForeignKey("PaperId")
                        .IsRequired()
                        .HasConstraintName("FK__ReviewerA__Paper__19DFD96B");

                    b.HasOne("BussinessObject.Entity.User", "Reviewer")
                        .WithMany("ReviewerAssignments")
                        .HasForeignKey("ReviewerId")
                        .IsRequired()
                        .HasConstraintName("FK__ReviewerA__Revie__1AD3FDA4");

                    b.Navigation("Paper");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("BussinessObject.Entity.Schedule", b =>
                {
                    b.HasOne("BussinessObject.Entity.Conference", "Conference")
                        .WithMany("Schedules")
                        .HasForeignKey("ConferenceId")
                        .IsRequired()
                        .HasConstraintName("FK__Schedule__Confer__2BFE89A6");

                    b.HasOne("BussinessObject.Entity.Paper", "Paper")
                        .WithMany("Schedules")
                        .HasForeignKey("PaperId")
                        .HasConstraintName("FK__Schedule__PaperI__2CF2ADDF");

                    b.HasOne("BussinessObject.Entity.User", "Presenter")
                        .WithMany("Schedules")
                        .HasForeignKey("PresenterId")
                        .HasConstraintName("FK__Schedule__Presen__2DE6D218");

                    b.Navigation("Conference");

                    b.Navigation("Paper");

                    b.Navigation("Presenter");
                });

            modelBuilder.Entity("BussinessObject.Entity.User", b =>
                {
                    b.HasOne("BussinessObject.Entity.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK__User__RoleId__4D94879B");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BussinessObject.Entity.UserConferenceRole", b =>
                {
                    b.HasOne("BussinessObject.Entity.Conference", "Conference")
                        .WithMany("UserConferenceRoles")
                        .HasForeignKey("ConferenceId")
                        .IsRequired()
                        .HasConstraintName("FK__UserConfe__Confe__68487DD7");

                    b.HasOne("BussinessObject.Entity.ConferenceRole", "ConferenceRole")
                        .WithMany("UserConferenceRoles")
                        .HasForeignKey("ConferenceRoleId")
                        .IsRequired()
                        .HasConstraintName("FK__UserConfe__Confe__6754599E");

                    b.HasOne("BussinessObject.Entity.User", "User")
                        .WithMany("UserConferenceRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__UserConfe__UserI__66603565");

                    b.Navigation("Conference");

                    b.Navigation("ConferenceRole");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ConferenceTopic", b =>
                {
                    b.HasOne("BussinessObject.Entity.Conference", null)
                        .WithMany()
                        .HasForeignKey("ConferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ConferenceTopic_Conference");

                    b.HasOne("BussinessObject.Entity.Topic", null)
                        .WithMany()
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ConferenceTopic_Topic");
                });

            modelBuilder.Entity("ProceedingPaper", b =>
                {
                    b.HasOne("BussinessObject.Entity.Paper", null)
                        .WithMany()
                        .HasForeignKey("PaperId")
                        .IsRequired()
                        .HasConstraintName("FK__Proceedin__Paper__41EDCAC5");

                    b.HasOne("BussinessObject.Entity.Proceeding", null)
                        .WithMany()
                        .HasForeignKey("ProceedingId")
                        .IsRequired()
                        .HasConstraintName("FK__Proceedin__Proce__40F9A68C");
                });

            modelBuilder.Entity("BussinessObject.Entity.AnswerQuestion", b =>
                {
                    b.Navigation("AnswerLikes");

                    b.Navigation("InverseParentAnswer");
                });

            modelBuilder.Entity("BussinessObject.Entity.Conference", b =>
                {
                    b.Navigation("CallForPapers");

                    b.Navigation("Forum");

                    b.Navigation("Papers");

                    b.Navigation("Payments");

                    b.Navigation("Proceedings");

                    b.Navigation("Registrations");

                    b.Navigation("Schedules");

                    b.Navigation("UserConferenceRoles");
                });

            modelBuilder.Entity("BussinessObject.Entity.ConferenceRole", b =>
                {
                    b.Navigation("UserConferenceRoles");
                });

            modelBuilder.Entity("BussinessObject.Entity.Forum", b =>
                {
                    b.Navigation("ForumQuestions");
                });

            modelBuilder.Entity("BussinessObject.Entity.ForumQuestion", b =>
                {
                    b.Navigation("AnswerQuestions");

                    b.Navigation("QuestionLikes");
                });

            modelBuilder.Entity("BussinessObject.Entity.Notification", b =>
                {
                    b.Navigation("NotificationStatuses");
                });

            modelBuilder.Entity("BussinessObject.Entity.Paper", b =>
                {
                    b.Navigation("PaperAuthors");

                    b.Navigation("PaperRevisions");

                    b.Navigation("Payments");

                    b.Navigation("ReviewerAssignments");

                    b.Navigation("Reviews");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("BussinessObject.Entity.PaperRevision", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("BussinessObject.Entity.Payment", b =>
                {
                    b.Navigation("Papers");
                });

            modelBuilder.Entity("BussinessObject.Entity.Registration", b =>
                {
                    b.Navigation("Certificate");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("BussinessObject.Entity.Review", b =>
                {
                    b.Navigation("ReviewComments");

                    b.Navigation("ReviewHighlights");
                });

            modelBuilder.Entity("BussinessObject.Entity.ReviewHighlight", b =>
                {
                    b.Navigation("HighlightAreas");

                    b.Navigation("ReviewComments");
                });

            modelBuilder.Entity("BussinessObject.Entity.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("BussinessObject.Entity.Topic", b =>
                {
                    b.Navigation("Papers");
                });

            modelBuilder.Entity("BussinessObject.Entity.User", b =>
                {
                    b.Navigation("AnswerLikes");

                    b.Navigation("AnswerQuestions");

                    b.Navigation("Conferences");

                    b.Navigation("ForumQuestions");

                    b.Navigation("NotificationStatuses");

                    b.Navigation("Notifications");

                    b.Navigation("PaperAuthors");

                    b.Navigation("Payments");

                    b.Navigation("Proceedings");

                    b.Navigation("QuestionLikes");

                    b.Navigation("Registrations");

                    b.Navigation("ReviewComments");

                    b.Navigation("ReviewerAssignments");

                    b.Navigation("Reviews");

                    b.Navigation("Schedules");

                    b.Navigation("UserConferenceRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
